package poisson.lib;

import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEComplex;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEComplexType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.utils.MathUtils;

/**
 * Class for solving 3D Poisson equation in fourier space. All three dimensions
 * are equal size.
 * @author Marko Stojanovic
 */
public class PoissonSolver extends KernelLib {

	private final DFEVector<DFEComplex> m_output;

	/**
	 * Default constructor creating an {@link PoissonSolver}.
	 *
	 * @param owner {@link KernelLib Kernel} object that uses the solver.
	 * @param input contains stream of inputs
	 * @param N The size of space dimensions (Must be a power of two)
	 */
	public PoissonSolver(KernelLib owner, DFEVector<DFEComplex> in,int N) {
		super(owner);

		//Defining types
		DFEType							partType			= dfeFloat(8,24);
		DFEComplexType					dataType			= in[0].getType();
		DFEVectorType<DFEComplex>		vectorType			= new DFEVectorType<DFEComplex>(dataType, 4);
		DFEType							romAddressType 		= dfeUInt(MathUtils.bitsToAddress(2*N));

		//Defining constants
		DFEVar zeroV = constant.var(partType,0);
		DFEVar oneV = constant.var(partType,1);
		DFEVar sixV = constant.var(partType,6);
		DFEVar dh = constant.var(partType,1/(double)((N-1)*(N-1)));

		DFEComplex hc = dataType.newInstance(this);
		hc.setReal(dh);
		hc.setImaginary(zeroV);

		DFEComplex zero = dataType.newInstance(this);
		zero.setReal(zeroV);
		zero.setImaginary(zeroV);

		DFEComplex one = dataType.newInstance(this);
		one.setReal(oneV);
		one.setImaginary(zeroV);

		DFEComplex six = dataType.newInstance(this);
		six.setReal(sixV);
		six.setImaginary(zeroV);

		//Creating memory for storing necessary twiddle factors
		double contents[] = new double[2*N];
		for (int b = 0; b <2*N; b+=2){
			contents[b]   = Math.cos(Math.PI/N*b); //2*b/2=b
			contents[b+1] = Math.sin(Math.PI/N*b);
		}
		Memory<DFEVar> twiddles = mem.alloc(dfeFloat(8,24), 2*N);
		twiddles.setContents(contents);

		//Creating chain of counters necessary for choosing twiddle factors
		CounterChain chain = control.count.makeCounterChain();
		DFEVar i = chain.addCounter(N, 1);
		DFEVar j = chain.addCounter(N, 1);
		DFEVar k = chain.addCounter(N, 4);

		//Twiddle factors corresponding to the fastest dimension for current 4 input values
		DFEVector<DFEComplex> Wk = vectorType.newInstance(this);
		for(int b=0;b<4;b++){
			DFEVar address = 2*(k.cast(romAddressType)+b);
			DFEVar realK = twiddles.read(address);
			DFEVar imagK = twiddles.read(address+1);
			Wk[b].setReal(realK);
			Wk[b].setImaginary(imagK);
		}

		//Twiddle factors corresponding to medium dimension for current 4 input values
		DFEVar realJ = twiddles.read(2*j.cast(romAddressType));
		DFEVar imagJ = twiddles.read(2*j.cast(romAddressType)+1);
		DFEComplex Wj = dataType.newInstance(this);
		Wj.setReal(realJ);
		Wj.setImaginary(imagJ);

		//Twiddle factors corresponding to the slowest dimension for current 4 input values
		DFEVar realI = twiddles.read(2*i.cast(romAddressType));
		DFEVar imagI = twiddles.read(2*i.cast(romAddressType)+1);
		DFEComplex Wi = dataType.newInstance(this);
		Wi.setReal(realI);
		Wi.setImaginary(imagI);

		//Calculating output
		DFEVector<DFEComplex> denomTry = vectorType.newInstance(this);
		DFEVector<DFEComplex> denom = vectorType.newInstance(this);
		DFEVector<DFEComplex> bufferOutput = vectorType.newInstance(this);

		for(int b=0; b<4; b++){
			denomTry[b] <== Wk[b] + 1/Wk[b] + Wj + 1/Wj + Wi + 1/Wi - six;
			denom[b] <== denomTry[b].getReal() === zeroV & denomTry[b].getImaginary() === zeroV ? hc : denomTry[b] ;
			bufferOutput[b] <== in[b]*dh/denom[b];
		}

		m_output= bufferOutput;

	}

	public DFEVector<DFEComplex> getOutput() {
		return m_output;
	}
}

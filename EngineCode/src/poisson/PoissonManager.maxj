package poisson;

import com.maxeler.maxcompiler.v2.managers.BuildConfig;
import com.maxeler.maxcompiler.v2.managers.BuildConfig.Effort;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;

public class PoissonManager extends CustomManager {
	
	/**
	 * Size in the first dimension. Has to be a power of 2 and at least 32.
	 */
	private static final int N = 32;
	/**
	 * Size in the second dimension.
	 * If this value is set to one a 1, 1D space is assumed.
	 * Has to be a power of 2 and at least 32 or be equal to 1.
	 */
	private static final int M = 32;
	/**
	 * Size in the third dimension
	 * If this value is set to one a 1, 2D space is assumed.
	 * Has to be a power of 2 and at least 32 or be equal to 1.
	 * If M equals 1 this value has to be 1 as well.
	 */
	private static final int L = 32;
	
	public PoissonManager(PoissonParams params) {
		super(params);

		this.addMaxFileConstant("N", N);
		this.addMaxFileConstant("M", M);
		this.addMaxFileConstant("L", L);
	}

	public static void main(String[] args) {
		PoissonParams params = new PoissonParams(args);
		PoissonManager manager = new PoissonManager(params);
		
		// Kernels
		PoissonKernel kernel = new PoissonKernel(manager.makeKernelParameters("PoissonKernel"), params, N, M, L);

		KernelBlock kb = manager.addKernel(kernel);
		kb.getInput("poissonIn") <== manager.addStreamFromCPU("poissonIn");
		manager.addStreamToCPU("poissonOut") <== kb.getOutput("poissonOut");

		BuildConfig buildConfig = manager.getBuildConfig();
		buildConfig.setBuildEffort(Effort.HIGH);
		buildConfig.setEnableTimingAnalysis(true);
		buildConfig.setMPPRCostTableSearchRange(params.getMPPRStartCT(), params.getMPPREndCT());
		buildConfig.setMPPRParallelism(params.getMPPRThreads());
		buildConfig.setMPPRRetryNearMissesThreshold(params.getMPPRRetryThreshold());

		manager.build();
	}
}
